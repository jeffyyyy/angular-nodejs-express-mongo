<div ng-include src="'/public/partials/header.ejs'"></div>

<div class="container">
	<div class="well text-center">
	<h2>A Flight chess game which I loved in childhood :). Drawing this for fun </h2>
		<canvas id="flight" width="680" height="680" style="background:#c0c0c0;">
			<p>Your browser doesn't support canvas</p>
		</canvas>

		<script type="text/javascript">
		var FlightGame = function(length, times) {
			this.myRect = [];
			this.myTri = [];
			this.color = {"yellow": "#ffff00", "blue": "#0000ff", "red": "#ff0000", "green": "#00ff00", "grey": "#c0c0c0"};
			this.length = length;
			this.times = times;
			return this;
		}

		FlightGame.prototype.drawRect = function(x, y, w, h, fill) {
			var obj = {};
		    obj.x = x;
		    obj.y = y;
		    obj.w = w;
		    obj.h = h;
		    obj.fill = fill;

		    this.myRect.push(obj);
		}

		FlightGame.prototype.drawSmallRect = function(data, size, fill, vertical) {
			for(var i=0; i<fill.length; i++) {
				var obj = {};
				if (vertical) {
					obj.x = data[0] * l;
					obj.y = (data[1] + i) * l;
				} else {
					obj.x = (data[0] + i) * l;
					obj.y = data[1] * l;
				}
				
				obj.w = size[0] * l;
				obj.h = size[1] * l;
			
				
				obj.fill = fill[i];

				this.myRect.push(obj);
			}
		}

		FlightGame.prototype.drawTriangle = function (data, fill) {
			var times = this.times;
			for(var i=0; i<fill.length; i++) {
				var obj = {};
				obj.x1 = data[0] * l;
				obj.y1 = data[1] * l;
				obj.x2 = data[2] * l;
				obj.y2 = data[3] * l;
				obj.x3 = data[4] * l;
				obj.y3 = data[5] * l;
				if ( i ==1 ) {
					obj.x1 = (times - data[0]) * l;
					obj.x2 = (times - data[2]) * l;
					obj.x3 = (times - data[4]) * l;
				} else if (i == 2) {
					obj.y1 = (times - data[1]) * l;
					obj.y2 = (times - data[3]) * l;
					obj.y3 = (times - data[5]) * l;
				} else if (i == 3) {
					obj.x1 = (times - data[0]) * l;
					obj.y1 = (times - data[1]) * l;
					obj.x2 = (times - data[2]) * l;
					obj.y2 = (times - data[3]) * l;
					obj.x3 = (times - data[4]) * l;
					obj.y3 = (times - data[5]) * l;
				}
				
				obj.fill = fill[i];

				this.myTri.push(obj);
			}
		}

		FlightGame.prototype.drawMiddle = function (data, fill) {
			var times = this.times;
			for(var i=0; i<fill.length; i++) {
				var obj = {};
				obj.x1 = data[0] * l;
				obj.y1 = data[1] * l;
				obj.x2 = data[2] * l;
				obj.y2 = data[3] * l;
				obj.x3 = data[4] * l;
				obj.y3 = data[5] * l;
				if ( i ==1 ) {
					obj.x3 = (times - data[4]) * l;
					obj.y3 = (times - data[5]) * l;
				} else if (i == 2) {
					obj.x1 = (times-data[0]) * l;
					obj.x3 = (times - data[4]) * l;
				} else if (i == 3) {
					obj.y1 = (times - data[1]) * l;
					obj.x3 = (times - data[4]) * l;
				}
				
				obj.fill = fill[i];

				this.myTri.push(obj);
			}
		}

		// get canvas element.
		var elem = document.getElementById('flight');

		// check if ctx exist
		if (elem.getContext) {
			var l = 40;
			var fg = new FlightGame(l, $("#flight").attr("width")/l);
			var color = fg.color;

		    //draw the four players starting area
		    fg.drawRect(0, 0, l*4, l*4, color.yellow);
		    fg.drawRect(l*13, 0, l*4, l*4, color.blue);
		    fg.drawRect(0, l*13, l*4, l*4, color.red);
		    fg.drawRect(l*13, l*13, l*4, l*4, color.green);

			//draw the main four path to the end
			fg.drawRect(l*8, l*2, l, l*5, color.blue);
			fg.drawRect(l*8, l*10, l, l*5, color.red);
			fg.drawRect(l*10, l*8, l*5, l, color.green);
			fg.drawRect(l*2, l*8, l*5, l, color.yellow);

			//draw all the rest rectangles line by line
			fg.drawSmallRect([6, 0], [1, 2], [color.red, color.yellow, color.blue, color.green, color.red]);
			fg.drawSmallRect([6, 0], [1, 2], [color.red, color.yellow, color.blue, color.green, color.red]);
			
			fg.drawSmallRect([4, 2], [2, 1], [color.blue, color.yellow], true);
			fg.drawSmallRect([11, 2], [2, 1], [color.blue, color.green], true);

			fg.drawSmallRect([2, 4], [1, 2], [color.yellow, color.blue]);
			fg.drawSmallRect([13, 4], [1, 2], [color.blue, color.green]);

			fg.drawSmallRect([0, 6], [2, 1], [color.green, color.blue, color.yellow, color.red, color.green], true);
			fg.drawSmallRect([15, 6], [2, 1], [color.yellow, color.blue, color.green, color.red, color.yellow], true);

			fg.drawSmallRect([2, 11], [1, 2], [color.yellow, color.red]);
			fg.drawSmallRect([13, 11], [1, 2], [color.red, color.green]);

			fg.drawSmallRect([4, 13], [2, 1], [color.yellow, color.red], true);
			fg.drawSmallRect([11, 13], [2, 1], [color.green, color.red], true);

			fg.drawSmallRect([6, 15], [1, 2], [color.blue, color.yellow, color.red, color.green, color.blue]);

			//draw all the triangles
			fg.drawMiddle([7, 7, 8.5, 8.5, 7, 10], [color.yellow, color.blue, color.green, color.red]);	// 64 70 76 58
			fg.drawTriangle([4, 2, 6, 2, 6, 0], [color.green, color.yellow, color.green, color.yellow]);	// 21 27 1 47
			fg.drawTriangle([0, 6, 2, 6, 2, 4], [color.red, color.red, color.blue, color.blue]);	// 14 34 8 40
			fg.drawTriangle([4, 4, 6, 4, 6, 6], [color.red, color.red, color.blue, color.blue]);	// 18 30 4 44
			fg.drawTriangle([4, 4, 6, 6, 4, 6], [color.green, color.yellow, color.green, color.yellow]);	// 18 30 4 44

		    ctx = elem.getContext('2d');
		    for (var i in fg.myRect) {
		        oRec = fg.myRect[i];
		        ctx.fillStyle = oRec.fill;
		        ctx.fillRect(oRec.x, oRec.y, oRec.w, oRec.h);
		    }
		    
		    for (var i in fg.myTri) {
		    	oTri = fg.myTri[i];
		    	ctx.beginPath();
		    	ctx.moveTo(oTri.x1, oTri.y1);
		    	ctx.lineTo(oTri.x2, oTri.y2);
		    	ctx.lineTo(oTri.x3, oTri.y3);
		    	ctx.closePath();
		    	ctx.strokeStyle = oTri.fill;
		    	ctx.fillStyle = oTri.fill;
		    	ctx.stroke();
		    	ctx.fill();
		    }

		}
		</script>

	</div>
</div>

<div ng-include src="'/public/partials/footer.ejs'"></div>